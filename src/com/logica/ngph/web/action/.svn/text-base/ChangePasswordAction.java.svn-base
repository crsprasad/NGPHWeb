package com.logica.ngph.web.action;

import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.struts2.interceptor.SessionAware;
import org.apache.struts2.interceptor.validation.SkipValidation;
import org.springframework.context.ApplicationContextException;

import com.logica.ngph.service.ChangePwdService;
import com.logica.ngph.web.utils.ApplicationContextProvider;
import com.logica.ngph.web.utils.WebConstants;
import com.opensymphony.xwork2.ActionSupport;

public class ChangePasswordAction extends ActionSupport implements SessionAware{
	private static final long serialVersionUID = 1L;
	private static Logger logger = Logger.getLogger(ChangePasswordAction.class);
	private Map<String, Object> session;
	private String oldPwd;
	private String newPwd;
	private String confPwd;
	
	public String getOldPwd() {
		return oldPwd;
	}

	public void setOldPwd(String oldPwd) {
		this.oldPwd = oldPwd;
	}

	public String getNewPwd() {
		return newPwd;
	}

	public void setNewPwd(String newPwd) {
		this.newPwd = newPwd;
	}

	public String getConfPwd() {
		return confPwd;
	}

	public void setConfPwd(String confPwd) {
		this.confPwd = confPwd;
	}

	public Map<String, Object> getSession() {
		return session;
	}

	public void setSession(Map<String, Object> session) {
		this.session = session;
	}
	@SkipValidation
	public String getChangePwd()
	{
		try{
			setOldPwd("");
			setNewPwd("");
			setConfPwd("");
			return "success";
			
		}catch (NullPointerException  nullPointerException) {
			AuditServiceUtil.logNullPointerException(nullPointerException, logger);
		}
		catch (ApplicationContextException applicationContextException) {
			AuditServiceUtil.logApplicationException(applicationContextException, logger);
		}
		catch (ClassCastException classCastException) {
			AuditServiceUtil.logClassCastException(classCastException, logger)	;
		}
		catch (Exception exception) {
			AuditServiceUtil.logException(exception,logger);
		}
		addActionError("Unable To Perfrom Action");
		return "input";
	}
	public String changePwd()
	{
		try{
			String userId = (String)session.get(WebConstants.CONSTANT_USER_NAME);
			ChangePwdService changePwdService  = (ChangePwdService) ApplicationContextProvider.getBean("changePwdService");
			Boolean check= changePwdService.isOldPwdMatches(userId,getOldPwd());
		if(check)
		{
			if(getNewPwd().equals(getConfPwd()))
			{
				changePwdService.changePwd(userId,getNewPwd());
				return "success";
			}
			else
			{
				addFieldError("oldPwd", "New Password And Confirm Password Doesn't Match");
				return "input";
			}
		}else
		{
			addFieldError("oldPwd", "Old Password Is Wrong");
			return "input";
		}
			
			
			
		}catch (NullPointerException  nullPointerException) {
			AuditServiceUtil.logNullPointerException(nullPointerException, logger);
		}
		catch (ApplicationContextException applicationContextException) {
			AuditServiceUtil.logApplicationException(applicationContextException, logger);
		}
		catch (ClassCastException classCastException) {
			AuditServiceUtil.logClassCastException(classCastException, logger)	;
		}
		catch (Exception exception) {
			AuditServiceUtil.logException(exception,logger);
		}
		addActionError("Unable To Perfrom Action");
		return "input";
		
	}

}
